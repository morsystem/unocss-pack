// Action to regenerate CSS by scanning all modules and creating a css-generated event
// This version uses the real UnoCSS engine
export interface RegenerateCssArgs {
  configName?: string;  // Configuration to use (default: 'tailwind')
  minify?: boolean;     // Minify the generated CSS (default: true)
  includeReset?: boolean; // Include CSS reset (default: false)
}

export async function execute(args: RegenerateCssArgs): Promise<any> {
  const {
    configName = 'tailwind',
    minify = true,
    includeReset = false
  } = args;

  console.log(`üé® Regenerating CSS for configuration: ${configName}`);
  
  try {
    // 1. Scan all modules for CSS classes
    console.log('üìç Scanning modules for CSS classes...');
    const classes = await scanModulesForClasses();
    console.log(`  Found ${classes.length} unique classes`);
    
    // 2. Load UnoCSS core and presets dynamically
    console.log('üì¶ Loading UnoCSS and presets...');
    const { createGenerator } = await import('unocss-core');
    const presetWind = (await import('preset-tailwind.bundle')).default;
    
    // 3. Configure UnoCSS
    const config = {
      presets: [
        presetWind({
          // Tailwind 4 preset options
        }),
      ],
      // Disable preflight to control reset manually
      preflight: includeReset,
    };
    
    // 4. Create generator and generate CSS
    console.log('üîß Generating CSS...');
    console.log(`  Classes to generate: ${classes.slice(0, 10).join(', ')}...`);
    
    const generator = createGenerator(config);
    const result = await generator.generate(classes.join(' '));
    const css = result.css;
    
    let finalCss = css || '';
    
    // 5. Add custom reset if requested and preflight is disabled
    if (includeReset && !config.preflight) {
      const reset = `/* UnoCSS Reset */
*, ::before, ::after { box-sizing: border-box; }
html { line-height: 1.5; -webkit-text-size-adjust: 100%; }
body { margin: 0; font-family: system-ui, -apple-system, sans-serif; }

`;
      finalCss = reset + finalCss;
    }
    
    // 6. Add header
    const header = `/* Generated by Motor UnoCSS - ${Motor.time.now()} */
/* Build-time CSS generation from event-sourced modules */

`;
    finalCss = header + finalCss;
    
    // 7. Minify if requested (UnoCSS may already minify)
    if (minify && !finalCss.includes('\n')) {
      // Already minified by UnoCSS
    }
    
    console.log(`  Generated ${finalCss.length} bytes of CSS`);
    
    // 8. Create both css-generated event record AND asset record
    // Event record for audit trail
    const recordData = {
      content: finalCss,
      configName,
      classCount: classes.length,
      classes: classes.slice(0, 100), // Store first 100 classes for debugging
      presets: ['@unocss/preset-wind4'],
      minified: minify,
      includeReset,
      size: finalCss.length,
      generatedAt: Motor.time.now(),
      generatedBy: 'system'
    };
    
    createRecord('css-generated', configName, 'generate', recordData);
    
    // Also create/update asset record for serving
    const fingerprint = Math.random().toString(36).substring(2, 10);
    
    createRecord('asset', `${configName}.css`, 'add', {
      content: finalCss,
      mime_type: 'text/css',
      fingerprint: fingerprint,
      routes: [
        {
          path: `/${configName}.css`,
          cache_max_age: 300
        }
      ],
      description: `UnoCSS generated styles for ${configName}`,
      version: 1,
      size: finalCss.length,
      is_binary: false,
      encoding: 'utf8'
    });
    
    console.log(`‚úÖ CSS generated successfully: ${finalCss.length} bytes`);
    
    return Motor.action.success({
      message: `CSS regenerated for ${configName}`,
      size: finalCss.length,
      classCount: classes.length,
      url: `/${configName}.css`
    });
    
  } catch (error: any) {
    console.error('‚ùå CSS generation failed:', error);
    console.error('Error stack:', error.stack);
    return Motor.action.error(`Failed to generate CSS: ${error.message || error}`);
  }
}

// Scan all modules for CSS classes
async function scanModulesForClasses(): Promise<string[]> {
  try {
    // Use Motor.query.run to scan modules for CSS classes
    const result = await Motor.query.run('scan-classes', {
      includeModules: true,
      includeAssets: true,
      includeRouters: false
    });
    
    console.log(`  Query returned ${result.count} unique classes from ${result.scannedRecords} records`);
    
    // Return the array of classes
    return result.classes || [];
  } catch (error: any) {
    console.error('Failed to scan modules:', error.message);
    
    // Fallback to some basic classes if the query fails
    return [
      'flex', 'items-center', 'justify-center', 'p-4', 'p-8',
      'bg-gray-50', 'bg-white', 'text-gray-800',
      'rounded-lg', 'shadow-lg', 'font-bold'
    ];
  }
}