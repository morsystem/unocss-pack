// Action to regenerate CSS by scanning all modules and creating a css-generated event
// This JavaScript version uses the real UnoCSS engine

export async function execute(args) {
  const {
    configName = 'unocss-wind4',
    themeModule = null, // Optional: name of theme module to load (e.g., 'theme-config')
    minify = true,
    includeReset = false
  } = args;

  console.log(`üé® Regenerating CSS for configuration: ${configName}`);
  if (themeModule) {
    console.log(`üéØ Using theme module: ${themeModule}`);
  }
  
  try {
    // 1. Scan all modules for CSS classes
    console.log('üìç Scanning modules for CSS classes...');
    const classes = await scanModulesForClasses();
    console.log(`  Found ${classes.length} unique classes`);
    
    // 2. Load UnoCSS core and presets dynamically
    console.log('üì¶ Loading UnoCSS and presets...');
    const { createGenerator } = await import('unocss-core');
    const presetWind4 = (await import('preset-tailwind.bundle')).default;
    
    // 3. Load theme configuration from Motor module if specified
    let customTheme = {};
    if (themeModule) {
      try {
        console.log(`üìã Loading theme from module: ${themeModule}`);
        const themeModuleExports = await import(themeModule);
        customTheme = themeModuleExports.theme || themeModuleExports.default || {};
        console.log(`  Theme loaded with ${Object.keys(customTheme).length} configuration keys`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Could not load theme module '${themeModule}':`, error.message);
      }
    }
    
    // 4. Configure UnoCSS with theme
    const config = {
      presets: [
        presetWind4, // Already configured preset object
      ],
      theme: customTheme, // Apply the custom theme
      // Disable preflight to control reset manually
      preflight: includeReset,
    };
    
    // 5. Create generator and generate CSS
    console.log('üîß Generating CSS...');
    if (themeModule && customTheme.colors) {
      console.log(`  Using custom colors: ${Object.keys(customTheme.colors).join(', ')}`);
    }
    console.log(`  Classes to generate: ${classes.slice(0, 10).join(', ')}...`);
    
    const generator = await createGenerator(config);
    const result = await generator.generate(classes.join(' '));
    const css = result.css;
    
    let finalCss = css || '';
    
    // 5. Add custom reset if requested and preflight is disabled
    if (includeReset && !config.preflight) {
      const reset = `/* UnoCSS Reset */
*, ::before, ::after { box-sizing: border-box; }
html { line-height: 1.5; -webkit-text-size-adjust: 100%; }
body { margin: 0; font-family: system-ui, -apple-system, sans-serif; }

`;
      finalCss = reset + finalCss;
    }
    
    // 7. Add header with theme info
    const header = `/* Generated by Motor UnoCSS - ${Motor.time.now()} */
/* Build-time CSS generation from event-sourced modules */
${themeModule ? `/* Theme: ${themeModule} */` : ''}

`;
    finalCss = header + finalCss;
    
    // 7. Minify if requested (UnoCSS may already minify)
    if (minify && !finalCss.includes('\n')) {
      // Already minified by UnoCSS
    }
    
    console.log(`  Generated ${finalCss.length} bytes of CSS`);
    
    // 8. Create both css-generated event record AND asset record
    // Event record for audit trail
    const recordData = {
      content: finalCss,
      configName,
      themeModule: themeModule || null,
      classCount: classes.length,
      classes: classes.slice(0, 100), // Store first 100 classes for debugging
      presets: ['@unocss/preset-wind4'],
      minified: minify,
      includeReset,
      size: finalCss.length,
      generatedAt: Motor.time.now(),
      generatedBy: 'system'
    };
    
    createRecord('css-generated', configName, 'generate', recordData);
    
    // Also create/update asset record for serving
    // Calculate content-based fingerprint for proper cache busting
    // Simple hash based on content length and first/last characters
    const fingerprint = (finalCss.length.toString(16) + 
      finalCss.charCodeAt(0).toString(16) + 
      finalCss.charCodeAt(Math.floor(finalCss.length/2)).toString(16) + 
      finalCss.charCodeAt(finalCss.length-1).toString(16)).substring(0, 8);
    
    // Use createAsset for proper blob storage
    createAsset(
      `${configName}.css`,
      finalCss,
      'text/css',
      [`/${configName}.css`],  // Routes will be handled by createAsset with fingerprinting
      `UnoCSS generated styles for ${configName}${themeModule ? ` with theme ${themeModule}` : ''}`
    );
    
    console.log(`‚úÖ CSS generated successfully: ${finalCss.length} bytes`);
    
    return Motor.action.success({
      message: `CSS regenerated for ${configName}${themeModule ? ` with theme ${themeModule}` : ''}`,
      size: finalCss.length,
      classCount: classes.length,
      themeModule,
      url: `/${configName}.css`
    });
    
  } catch (error) {
    console.error('‚ùå CSS generation failed:', error);
    console.error('Error stack:', error.stack);
    return Motor.action.error(`Failed to generate CSS: ${error.message || error}`);
  }
}

// Scan all modules for CSS classes
async function scanModulesForClasses() {
  try {
    // Use Motor.query.run to scan modules for CSS classes
    const result = await Motor.query.run('scan-classes', {
      includeModules: true,
      includeAssets: true,
      includeRouters: false
    });
    
    console.log(`  Query returned ${result.count} unique classes from ${result.scannedRecords} records`);
    
    // Return the array of classes
    return result.classes || [];
  } catch (error) {
    console.error('Failed to scan modules:', error.message);
    
    // Fallback to some basic classes if the query fails
    return [
      'flex', 'items-center', 'justify-center', 'p-4', 'p-8',
      'bg-gray-50', 'bg-white', 'text-gray-800',
      'rounded-lg', 'shadow-lg', 'font-bold'
    ];
  }
}