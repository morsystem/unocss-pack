// Query to generate CSS using UnoCSS
export interface GenerateCssParams {
  configName?: string;  // Name of config to use (default: 'all' for all presets)
  minify?: boolean;     // Minify output CSS (default: true)
  includeReset?: boolean;  // Include CSS reset (default: false)
}

export async function execute(params: GenerateCssParams = {}): Promise<string> {
  const {
    configName = 'all',
    minify = true,
    includeReset = false
  } = params;
  
  try {
    // 1. Get UnoCSS core module
    const unoCore = Motor.module.get('unocss-core.bundle');
    if (!unoCore) {
      throw new Error('UnoCSS core module not found. Please ensure the unocss pack is installed.');
    }
    
    // 2. Scan for classes
    const scanResult = await Motor.query.run('scan-classes');
    const classes = scanResult.classes || [];
    
    console.log(`Found ${classes.length} unique classes to process`);
    
    // 3. Get configuration
    let presets = [];
    let theme = {};
    let rules = [];
    let shortcuts = {};
    
    if (configName === 'all') {
      // Use all registered presets
      const presetsResult = await Motor.query.run('get-presets');
      
      for (const presetInfo of presetsResult.presets) {
        try {
          const presetModule = Motor.module.get(presetInfo.module);
          if (presetModule && presetModule.default) {
            presets.push(presetModule.default);
          }
        } catch (error) {
          console.warn(`Failed to load preset ${presetInfo.name}: ${error.message}`);
        }
      }
    } else {
      // Use specific configuration
      const configs = await Motor.query.getRecords({
        type: 'uno-config',
        name: configName
      });
      
      if (configs.length === 0) {
        // Try as a single preset
        const presetRecords = await Motor.query.getRecords({
          type: 'uno-preset',
          name: configName
        });
        
        if (presetRecords.length > 0) {
          const presetData = Motor.utils.parseJSON(presetRecords[0].data);
          const presetModule = Motor.module.get(presetData.module);
          if (presetModule && presetModule.default) {
            presets.push(presetModule.default);
          }
        } else {
          throw new Error(`Configuration or preset '${configName}' not found`);
        }
      } else {
        // Load custom configuration
        const configData = Motor.utils.parseJSON(configs[0].data);
        
        // Load specified presets
        for (const presetName of configData.presets || []) {
          const presetRecords = await Motor.query.getRecords({
            type: 'uno-preset',
            name: presetName
          });
          
          if (presetRecords.length > 0) {
            const presetData = Motor.utils.parseJSON(presetRecords[0].data);
            const presetModule = Motor.module.get(presetData.module);
            if (presetModule && presetModule.default) {
              presets.push(presetModule.default);
            }
          }
        }
        
        // Apply custom theme, rules, shortcuts
        theme = configData.theme || {};
        rules = configData.rules || [];
        shortcuts = configData.shortcuts || {};
      }
    }
    
    // 4. Create generator with configuration
    const { createGenerator, mergeConfigs } = unoCore;
    
    const config = mergeConfigs([
      {
        presets,
        theme,
        rules,
        shortcuts
      }
    ]);
    
    const generator = createGenerator(config);
    
    // 5. Generate CSS
    const result = await generator.generate(classes.join(' '));
    
    let css = result.css || '';
    
    // 6. Add reset if requested
    if (includeReset) {
      css = `/* UnoCSS Reset */
*, ::before, ::after { box-sizing: border-box; }
html { line-height: 1.5; -webkit-text-size-adjust: 100%; }
body { margin: 0; font-family: system-ui, -apple-system, sans-serif; }

${css}`;
    }
    
    // 7. Add header
    const header = `/* Generated by Motor UnoCSS - ${Motor.time.now()} */
/* Configuration: ${configName} */
/* Classes found: ${classes.length} */

`;
    
    return header + css;
    
  } catch (error) {
    console.error('CSS generation error:', error);
    return `/* Error generating CSS: ${error.message} */`;
  }
}